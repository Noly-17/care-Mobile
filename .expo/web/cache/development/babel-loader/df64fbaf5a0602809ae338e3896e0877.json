{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component, useState, useEffect } from 'react';\nimport { Button } from 'react-native-paper';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport MapView, { Circle, Marker, PROVIDER_GOOGLE, MapViewDirections, Polyline } from 'react-native-maps';\nimport * as Permissions from \"expo-permissions\";\nimport * as Location from 'expo-location';\nimport * as ImagePicker from 'expo-image-picker';\nimport { db } from \"../../firebase\";\nimport { ref, set, push, getDatabase, child, get } from 'firebase/database';\nimport { getStorage, ref as storageRef, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { decode } from \"@mapbox/polyline\";\nimport PolylineDirection from '@react-native-maps/polyline-direction';\n\nvar Evacuation = function Evacuation() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lat = _useState4[0],\n      setLat = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lng = _useState6[0],\n      setLng = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropLocation = _useState8[0],\n      setDropLocation = _useState8[1];\n\n  var GOOGLE_MAPS_APIKEY = \"AIzaSyCKGctZNeIYsMvXsVYQqPSkm2yO9wh1bes\";\n  var tokyoRegion = {\n    latitude: 15.215288476840579,\n    longitude: 120.10803222656251,\n    latitudeDelta: 0.01,\n    longitudeDelta: 0.01\n  };\n  var chibaRegion = {\n    latitude: 14.95009216614807,\n    longitude: 120.64636230468751,\n    latitudeDelta: 0.01,\n    longitudeDelta: 0.01\n  };\n  useEffect(function () {\n    _getLocation();\n\n    var dbRef = ref(getDatabase());\n    get(child(dbRef, \"evacuationRoutes/\")).then(function (snapshot) {\n      var users = [];\n      snapshot.forEach(function (item) {\n        var data = item.val();\n        users.push(data);\n      });\n      setUsers(users);\n      console.log(users);\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }, []);\n\n  var _getLocation = function _getLocation() {\n    var _await$Permissions$as, status, response, location;\n\n    return _regeneratorRuntime.async(function _getLocation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n          case 3:\n            _await$Permissions$as = _context.sent;\n            status = _await$Permissions$as.status;\n\n            if (!(status != 'granted')) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n          case 8:\n            response = _context.sent;\n            console.log('not granted');\n\n          case 10:\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n              enableHighAccuracy: true\n            }));\n\n          case 12:\n            location = _context.sent;\n            setLat(location.coords.latitude);\n            setLng(location.coords.longitude);\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('Error', _context.t0);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  var ggwp = {\n    latitude: lat,\n    longitude: lng\n  };\n  var origin = {\n    latitude: 19.363631,\n    longitude: -99.182545\n  };\n  var destination = {\n    latitude: 19.2932543,\n    longitude: -99.1794758\n  };\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(MapView, {\n    style: styles.map,\n    showsUserLocation: true,\n    initialRegion: {\n      latitude: lat,\n      longitude: lng,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    },\n    region: {\n      latitude: lat,\n      longitude: lng,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    }\n  }, React.createElement(Marker, {\n    coordinate: ggwp\n  }), React.createElement(Circle, {\n    center: ggwp,\n    radius: 1000,\n    strokeColor: \"#4F6D7A\",\n    strokeWidth: 2\n  }), React.createElement(PolylineDirection, {\n    origin: origin,\n    destination: tokyoRegion,\n    apiKey: GOOGLE_MAPS_APIKEY,\n    strokeWidth: 4,\n    strokeColor: \"#12bc00\"\n  }), users && users.map(function (user) {\n    var ggwp = {\n      latitude: user.latitude,\n      longitude: user.longitude\n    };\n    return React.createElement(Marker, {\n      key: user.latitude,\n      coordinate: ggwp,\n      onPress: function onPress() {\n        setDropLocation(ggwp);\n      }\n    });\n  }))));\n};\n\nexport default Evacuation;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height,\n    position: 'relative',\n    bottom: '10%'\n  },\n  button: {\n    width: 170,\n    alignSelf: 'center',\n    position: 'absolute',\n    bottom: '10%'\n  }\n});","map":{"version":3,"sources":["C:/Users/Kid/Desktop/care-mob/components/screens/Evacuation/index.js"],"names":["React","Component","useState","useEffect","Button","MapView","Circle","Marker","PROVIDER_GOOGLE","MapViewDirections","Polyline","Permissions","Location","ImagePicker","db","ref","set","push","getDatabase","child","get","getStorage","storageRef","uploadBytesResumable","getDownloadURL","decode","PolylineDirection","Evacuation","users","setUsers","lat","setLat","lng","setLng","dropLocation","setDropLocation","GOOGLE_MAPS_APIKEY","tokyoRegion","latitude","longitude","latitudeDelta","longitudeDelta","chibaRegion","_getLocation","dbRef","then","snapshot","forEach","item","data","val","console","log","catch","error","askAsync","LOCATION","status","response","getCurrentPositionAsync","enableHighAccuracy","location","coords","ggwp","origin","destination","styles","container","map","user","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","Dimensions","height","position","bottom","button","alignSelf"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport { Button } from 'react-native-paper';\nimport { StyleSheet, Text, View, Dimensions, Alert } from 'react-native';\nimport MapView, { Circle, Marker, PROVIDER_GOOGLE, MapViewDirections, Polyline } from 'react-native-maps';\nimport * as Permissions from \"expo-permissions\";\nimport * as Location from 'expo-location';\nimport * as ImagePicker from 'expo-image-picker';\nimport { db } from '../../firebase';\nimport { ref, set, push, getDatabase, child, get } from 'firebase/database';\nimport { getStorage, ref as storageRef, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport {decode} from \"@mapbox/polyline\";\nimport PolylineDirection from '@react-native-maps/polyline-direction';\n\n\n\nconst Evacuation = () => {\n\n    const [users, setUsers] = useState(null);\n    const [lat, setLat] = useState(0)\n    const [lng, setLng] = useState(0)\n    const [dropLocation, setDropLocation] = useState(null)\n    // const [coords, setCoords] = useState([]);\n\n    const GOOGLE_MAPS_APIKEY = \"AIzaSyCKGctZNeIYsMvXsVYQqPSkm2yO9wh1bes\"\n\n    const tokyoRegion = {\n        latitude: 15.215288476840579,\n        longitude: 120.10803222656251,\n        latitudeDelta: 0.01,\n        longitudeDelta: 0.01,\n      };\n      const chibaRegion = {\n        latitude: 14.95009216614807,\n            longitude: 120.64636230468751,\n        latitudeDelta: 0.01,\n        longitudeDelta: 0.01,\n      };\n\n\n    useEffect(() => {\n\n\n        // console.log(coords)\n        // getDirections(tokyoRegion, chibaRegion)\n        // .then(coords => setCoords(coords))\n        // .catch(err => console.log(\"Something went wrong\"));\n\n        _getLocation()\n        const dbRef = ref(getDatabase());\n        get(child(dbRef, `evacuationRoutes/`))\n            .then((snapshot) => {\n                const users = []\n                snapshot.forEach(item => {\n                    const data = item.val()\n                    users.push(data)\n                })\n                // this.setState({\n                //     users: users,\n                // })\n                setUsers(users);\n                console.log(users)\n\n            }).catch((error) => {\n                console.error(error);\n            });\n\n    }, [])\n\n\n\n\n\n\n    const _getLocation = async () => {\n        try {\n\n            const { status } = await Permissions.askAsync(Permissions.LOCATION);\n            if (status != 'granted') {\n                const response = await Permissions.askAsync(Permissions.LOCATION);\n                console.log('not granted')\n            }\n            const location = await Location.getCurrentPositionAsync({ enableHighAccuracy: true })\n\n            setLat(location.coords.latitude)\n            setLng(location.coords.longitude)\n\n\n\n        } catch (error) {\n            console.log('Error', error)\n        }\n    }\n\n\n\n\n    const ggwp = {\n        latitude: lat,\n        longitude: lng,\n    }\n\n\n    // const getDirections = async (startLoc, destinationLoc) => {\n    //     try {\n    //       const KEY = \"AIzaSyCKGctZNeIYsMvXsVYQqPSkm2yO9wh1bes\"; //put your API key here.\n    //       //otherwise, you'll have an 'unauthorized' error.\n    //       let resp = await fetch(\n    //         `https://maps.googleapis.com/maps/api/directions/json?origin=${startLoc}&destination=${destinationLoc}&key=${KEY}`\n    //       );\n    //       let respJson = await resp.json();\n    //       let points = decode(respJson.routes[0].overview_polyline.points);\n    //       console.log(points);\n    //       let coords = points.map((point, index) => {\n    //         return {\n    //           latitude: point[0],\n    //           longitude: point[1]\n    //         };\n    //       });\n    //       setCoords(coords)\n    //     } catch (error) {\n    //       return error;\n    //     }\n    //   };\n    \n\nconst origin = { latitude: 19.363631, longitude: -99.182545 };\nconst destination = { latitude: 19.2932543, longitude: -99.1794758 };\n     \n\n    return (\n        <>\n            <View style={styles.container}>\n                <MapView\n                    style={styles.map}\n                    showsUserLocation={true}\n                    initialRegion={{\n                        latitude: lat,\n                        longitude: lng,\n                        latitudeDelta: 0.0922,\n                        longitudeDelta: 0.0421,\n                    }}\n                    region={{\n                        latitude: lat,\n                        longitude: lng,\n                        latitudeDelta: 0.0922,\n                        longitudeDelta: 0.0421,\n                    }}\n                >\n                    <Marker coordinate={ggwp} />\n                    <Circle center={ggwp}\n                        radius={1000}\n                        strokeColor=\"#4F6D7A\"\n                        strokeWidth={2} />\n\n                        <PolylineDirection\n          origin={origin}\n          destination={tokyoRegion}\n          apiKey={GOOGLE_MAPS_APIKEY}\n          strokeWidth={4}\n          strokeColor=\"#12bc00\"\n        />\n\n                        {/* <Polyline\n        coordinates={coords} //specify our coordinates\n        strokeColor={\"red\"}\n        strokeWidth={3}\n      />                         */}\n\n\n\n                    {\n                        users && users.map(user => {\n                            const ggwp = {\n                                latitude: user.latitude,\n                                longitude: user.longitude\n                            }\n                            return (\n                                <Marker\n                                    key={user.latitude}\n                                    coordinate={ggwp}\n                                    onPress={() => {\n                                        setDropLocation(ggwp)\n                                    }}\n                                />\n\n                            )\n                        })\n                    }\n                </MapView>\n\n            </View>\n        </>\n    )\n}\n\n\nexport default Evacuation;\n\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    map: {\n        width: Dimensions.get('window').width,\n        height: Dimensions.get('window').height,\n        position: 'relative',\n        bottom: '10%'\n    },\n    button: {\n        width: 170,\n        alignSelf: 'center',\n        position: 'absolute',\n        bottom: '10%',\n\n    }\n});\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}