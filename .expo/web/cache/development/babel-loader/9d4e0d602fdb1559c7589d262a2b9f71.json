{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"arrayList\", \"selectedArrayList\", \"multiEnable\", \"errorText\", \"value\", \"onSelection\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, useRef, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { TextInput as Input, Button, Dialog, Portal, Searchbar } from 'react-native-paper';\nimport CheckboxInput from \"../components/checkBox\";\n\nvar PaperSelect = function PaperSelect(_ref) {\n  var label = _ref.label,\n      arrayList = _ref.arrayList,\n      selectedArrayList = _ref.selectedArrayList,\n      multiEnable = _ref.multiEnable,\n      errorText = _ref.errorText,\n      value = _ref.value,\n      onSelection = _ref.onSelection,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(value),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectText = _useState2[0],\n      setSelectText = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchKey = _useState4[0],\n      setSearchKey = _useState4[1];\n\n  var _useState5 = useState(_toConsumableArray(arrayList)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      arrayHolder = _useState6[0],\n      setArrayHolder = _useState6[1];\n\n  var _useState7 = useState(_toConsumableArray(arrayList)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      list = _useState8[0],\n      setList = _useState8[1];\n\n  var _useState9 = useState(_toConsumableArray(selectedArrayList)),\n      _useState10 = _slicedToArray(_useState9, 2),\n      selectedList = _useState10[0],\n      setSelectedList = _useState10[1];\n\n  var selectInputRef = useRef();\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      visible = _useState12[0],\n      setVisible = _useState12[1];\n\n  var showDialog = function showDialog() {\n    return setVisible(true);\n  };\n\n  var _hideDialog = function _hideDialog() {\n    var data = _toConsumableArray(list);\n\n    var selectedData = _toConsumableArray(selectedList);\n\n    var selected = [];\n    selectedData.forEach(function (val) {\n      data.forEach(function (el) {\n        if (val._id === el._id) {\n          selected.push(el.value);\n        }\n      });\n    });\n    value = selected.join();\n    setSelectText(selected.join());\n    onSelection({\n      text: selected.join(),\n      selectedList: selectedData\n    });\n    setVisible(false);\n    selectInputRef.current.blur();\n  };\n\n  var _onFocus = function _onFocus() {\n    setArrayHolder(arrayList);\n    setList(arrayList);\n    showDialog();\n  };\n\n  var _onChecked = function _onChecked(item) {\n    var selectedData = _toConsumableArray(selectedList);\n\n    var indexSelected = selectedData.indexOf(item);\n\n    if (indexSelected > -1) {\n      selectedData.splice(indexSelected, 1);\n    } else {\n      selectedData.push(item);\n    }\n\n    setSelectedList(selectedData);\n  };\n\n  var _onCheckedSingle = function _onCheckedSingle(item) {\n    var selectedData = _toConsumableArray(selectedList);\n\n    var indexSelected = selectedData.indexOf(item);\n\n    if (indexSelected > -1) {\n      selectedData = [];\n    } else {\n      selectedData = [];\n      selectedData.push(item);\n    }\n\n    setSelectedList(selectedData);\n  };\n\n  var _exists = function _exists(item) {\n    return selectedList.indexOf(item) > -1 ? true : false;\n  };\n\n  var _isCheckedAll = function _isCheckedAll() {\n    var data = _toConsumableArray(list);\n\n    var selectedData = _toConsumableArray(selectedList);\n\n    return selectedData.length !== 0 && selectedData.length === data.length;\n  };\n\n  var _checkAll = function _checkAll() {\n    var data = _toConsumableArray(list);\n\n    var selectedData = _toConsumableArray(selectedList);\n\n    if (selectedData.length === data.length) {\n      selectedData = [];\n    } else if (selectedData.length === 0 || selectedData.length > 0) {\n      selectedData = data.slice(0);\n    }\n\n    setSelectedList(selectedData);\n  };\n\n  var _renderListForMulti = function _renderListForMulti() {\n    return list.map(function (item, key) {\n      return React.createElement(TouchableOpacity, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center'\n        },\n        key: key,\n        onPress: function onPress() {\n          _onChecked(item);\n        }\n      }, React.createElement(CheckboxInput, {\n        isChecked: _exists(item),\n        label: item.value\n      }));\n    });\n  };\n\n  var _renderListForSingle = function _renderListForSingle() {\n    return list.map(function (item, key) {\n      return React.createElement(TouchableOpacity, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center'\n        },\n        key: key,\n        onPress: function onPress() {\n          _onCheckedSingle(item);\n        }\n      }, React.createElement(CheckboxInput, {\n        isChecked: _exists(item),\n        label: item.value\n      }));\n    });\n  };\n\n  var _filterFunction = function _filterFunction(text) {\n    setSearchKey(text);\n    var newData = arrayHolder.filter(function (item) {\n      return item.value.toLowerCase().includes(text.toLowerCase());\n    });\n    setList(newData);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Input, _extends({\n    ref: selectInputRef,\n    style: styles.input,\n    label: label,\n    underlineColor: \"transparent\",\n    mode: \"outlined\",\n    onFocus: _onFocus,\n    showSoftInputOnFocus: false,\n    value: selectText,\n    right: React.createElement(Input.Icon, {\n      name: \"chevron-down\"\n    })\n  }, props)), errorText ? React.createElement(Text, {\n    style: styles.error\n  }, errorText) : null), React.createElement(View, null, React.createElement(Portal, null, React.createElement(Dialog, {\n    visible: visible,\n    dismissable: false\n  }, React.createElement(Dialog.Title, null, label), React.createElement(Dialog.Content, null, React.createElement(Dialog.ScrollArea, {\n    style: {\n      height: 300,\n      paddingVertical: 10\n    }\n  }, React.createElement(Searchbar, {\n    value: searchKey,\n    placeholder: \"Search\",\n    onChangeText: function onChangeText(text) {\n      return _filterFunction(text);\n    },\n    style: {\n      marginBottom: 15\n    }\n  }), multiEnable === true && React.createElement(TouchableOpacity, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    onPress: function onPress() {\n      _checkAll();\n    }\n  }, React.createElement(CheckboxInput, {\n    isChecked: _isCheckedAll(),\n    label: \"Select All\"\n  })), React.createElement(ScrollView, null, multiEnable === true ? _renderListForMulti() : _renderListForSingle()))), React.createElement(Dialog.Actions, null, React.createElement(Button, {\n    onPress: _hideDialog\n  }, \"Done\"))))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    marginBottom: 10\n  },\n  input: {\n    backgroundColor: 'white'\n  },\n  error: {\n    fontSize: 14,\n    color: 'red',\n    paddingHorizontal: 4,\n    paddingTop: 4\n  }\n});\nexport default memo(PaperSelect);","map":{"version":3,"sources":["paperSelect.js"],"names":["TextInput","PaperSelect","props","useState","selectInputRef","useRef","showDialog","setVisible","_hideDialog","data","selectedData","selected","val","el","value","setSelectText","onSelection","text","selectedList","_onFocus","setArrayHolder","setList","_onChecked","item","indexSelected","setSelectedList","_onCheckedSingle","_exists","_isCheckedAll","_checkAll","_renderListForMulti","flexDirection","alignItems","_renderListForSingle","_filterFunction","setSearchKey","newData","arrayHolder","styles","container","errorText","error","height","paddingVertical","marginBottom","multiEnable","width","input","backgroundColor","fontSize","color","paddingHorizontal","paddingTop","memo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA,KAAA,IAAA,IAAA,EAAA,MAAA,EAAA,QAAA,QAAA,OAAA;;;;;;AAQA,SACEA,SAAS,IADX,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,SAAA,QAAA,oBAAA;AAOA,OAAA,aAAA;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OASd;AAAA,MATe,KASf,QATe,KASf;AAAA,MATe,SASf,QATe,SASf;AAAA,MATe,iBASf,QATe,iBASf;AAAA,MATe,WASf,QATe,WASf;AAAA,MATe,SASf,QATe,SASf;AAAA,MATe,KASf,QATe,KASf;AAAA,MATe,WASf,QATe,WASf;AAAA,MADDC,KACC;;AACJ,kBAAoCC,QAAQ,CAA5C,KAA4C,CAA5C;AAAA;AAAA,MAAM,UAAN;AAAA,MAAM,aAAN;;AACA,mBAAkCA,QAAQ,CAA1C,EAA0C,CAA1C;AAAA;AAAA,MAAM,SAAN;AAAA,MAAM,YAAN;;AACA,mBAAsCA,QAAQ,oBAA9C,SAA8C,EAA9C;AAAA;AAAA,MAAM,WAAN;AAAA,MAAM,cAAN;;AAEA,mBAAwBA,QAAQ,oBAAhC,SAAgC,EAAhC;AAAA;AAAA,MAAM,IAAN;AAAA,MAAM,OAAN;;AAEA,mBAAwCA,QAAQ,oBAAhD,iBAAgD,EAAhD;AAAA;AAAA,MAAM,YAAN;AAAA,MAAM,eAAN;;AAEA,MAAMC,cAAc,GAAGC,MAAvB,EAAA;;AACA,oBAA8BF,QAAQ,CAAtC,KAAsC,CAAtC;AAAA;AAAA,MAAM,OAAN;AAAA,MAAM,UAAN;;AAEA,MAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAMC,UAAU,CAAnC,IAAmC,CAAhB;AAAA,GAAnB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAIC,IAAI,sBAAR,IAAQ,CAAR;;AACA,QAAIC,YAAY,sBAAhB,YAAgB,CAAhB;;AACA,QAAIC,QAAQ,GAAZ,EAAA;AACAD,IAAAA,YAAY,CAAZA,OAAAA,CAAsBE,UAAAA,GAAD,EAAS;AAC5BH,MAAAA,IAAI,CAAJA,OAAAA,CAAcI,UAAAA,EAAD,EAAQ;AACnB,YAAID,GAAG,CAAHA,GAAAA,KAAYC,EAAE,CAAlB,GAAA,EAAwB;AACtBF,UAAAA,QAAQ,CAARA,IAAAA,CAAcE,EAAE,CAAhBF,KAAAA;AACD;AAHHF,OAAAA;AADFC,KAAAA;AAOAI,IAAAA,KAAK,GAAGH,QAAQ,CAAhBG,IAAQH,EAARG;AACAC,IAAAA,aAAa,CAACJ,QAAQ,CAAtBI,IAAcJ,EAAD,CAAbI;AACAC,IAAAA,WAAW,CAAC;AACVC,MAAAA,IAAI,EAAEN,QAAQ,CADJ,IACJA,EADI;AAEVO,MAAAA,YAAY,EAAER;AAFJ,KAAD,CAAXM;AAIAT,IAAAA,UAAU,CAAVA,KAAU,CAAVA;AACAH,IAAAA,cAAc,CAAdA,OAAAA,CAAAA,IAAAA;AAlBF,GAAA;;AAqBA,MAAMe,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBC,IAAAA,cAAc,CAAdA,SAAc,CAAdA;AACAC,IAAAA,OAAO,CAAPA,SAAO,CAAPA;AACAf,IAAAA,UAAU;AAHZ,GAAA;;AAMA,MAAMgB,UAAU,GAAIC,SAAdD,UAAcC,CAAAA,IAAD,EAAU;AAC3B,QAAMb,YAAY,sBADS,YACT,CAAlB;;AAEA,QAAMc,aAAa,GAAGd,YAAY,CAAZA,OAAAA,CAAtB,IAAsBA,CAAtB;;AACA,QAAIc,aAAa,GAAG,CAApB,CAAA,EAAwB;AACtBd,MAAAA,YAAY,CAAZA,MAAAA,CAAAA,aAAAA,EAAAA,CAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,YAAY,CAAZA,IAAAA,CAAAA,IAAAA;AACD;;AACDe,IAAAA,eAAe,CAAfA,YAAe,CAAfA;AATF,GAAA;;AAYA,MAAMC,gBAAgB,GAAIH,SAApBG,gBAAoBH,CAAAA,IAAD,EAAU;AACjC,QAAIb,YAAY,sBADiB,YACjB,CAAhB;;AAEA,QAAMc,aAAa,GAAGd,YAAY,CAAZA,OAAAA,CAAtB,IAAsBA,CAAtB;;AACA,QAAIc,aAAa,GAAG,CAApB,CAAA,EAAwB;AAEtBd,MAAAA,YAAY,GAAZA,EAAAA;AAFF,KAAA,MAGO;AACLA,MAAAA,YAAY,GAAZA,EAAAA;AACAA,MAAAA,YAAY,CAAZA,IAAAA,CAAAA,IAAAA;AACD;;AACDe,IAAAA,eAAe,CAAfA,YAAe,CAAfA;AAXF,GAAA;;AAcA,MAAME,OAAO,GAAIJ,SAAXI,OAAWJ,CAAAA,IAAD,EAAU;AACxB,WAAOL,YAAY,CAAZA,OAAAA,CAAAA,IAAAA,IAA6B,CAA7BA,CAAAA,GAAAA,IAAAA,GAAP,KAAA;AADF,GAAA;;AAIA,MAAMU,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,QAAMnB,IAAI,sBAAV,IAAU,CAAV;;AACA,QAAMC,YAAY,sBAAlB,YAAkB,CAAlB;;AACA,WAAOA,YAAY,CAAZA,MAAAA,KAAAA,CAAAA,IAA6BA,YAAY,CAAZA,MAAAA,KAAwBD,IAAI,CAAhE,MAAA;AAHF,GAAA;;AAMA,MAAMoB,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,QAAMpB,IAAI,sBAAV,IAAU,CAAV;;AACA,QAAIC,YAAY,sBAAhB,YAAgB,CAAhB;;AACA,QAAIA,YAAY,CAAZA,MAAAA,KAAwBD,IAAI,CAAhC,MAAA,EAAyC;AACvCC,MAAAA,YAAY,GAAZA,EAAAA;AADF,KAAA,MAEO,IAAIA,YAAY,CAAZA,MAAAA,KAAAA,CAAAA,IAA6BA,YAAY,CAAZA,MAAAA,GAAjC,CAAA,EAA0D;AAC/DA,MAAAA,YAAY,GAAGD,IAAI,CAAJA,KAAAA,CAAfC,CAAeD,CAAfC;AACD;;AAEDe,IAAAA,eAAe,CAAfA,YAAe,CAAfA;AATF,GAAA;;AAYA,MAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,WAAO,IAAI,CAAJ,GAAA,CAAS,UAAA,IAAA,EAAA,GAAA,EAAe;AAC7B,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AACE,QAAA,KAAK,EAAE;AAAEC,UAAAA,aAAa,EAAf,KAAA;AAAwBC,UAAAA,UAAU,EAAE;AAApC,SADT;AAEE,QAAA,GAAG,EAFL,GAAA;AAGE,QAAA,OAAO,EAAE,mBAAM;AACbV,UAAAA,UAAU,CAAVA,IAAU,CAAVA;AACD;AALH,OAAA,EAOE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,QAAA,SAAS,EAAEK,OAAO,CAAjC,IAAiC,CAAjC;AAAyC,QAAA,KAAK,EAAEJ,IAAI,CAACT;AAArD,OAAA,CAPF,CADF;AADF,KAAO,CAAP;AADF,GAAA;;AAgBA,MAAMmB,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC,WAAO,IAAI,CAAJ,GAAA,CAAS,UAAA,IAAA,EAAA,GAAA,EAAe;AAC7B,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AACE,QAAA,KAAK,EAAE;AAAEF,UAAAA,aAAa,EAAf,KAAA;AAAwBC,UAAAA,UAAU,EAAE;AAApC,SADT;AAEE,QAAA,GAAG,EAFL,GAAA;AAGE,QAAA,OAAO,EAAE,mBAAM;AACbN,UAAAA,gBAAgB,CAAhBA,IAAgB,CAAhBA;AACD;AALH,OAAA,EAOE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,QAAA,SAAS,EAAEC,OAAO,CAAjC,IAAiC,CAAjC;AAAyC,QAAA,KAAK,EAAEJ,IAAI,CAACT;AAArD,OAAA,CAPF,CADF;AADF,KAAO,CAAP;AADF,GAAA;;AAgBA,MAAMoB,eAAe,GAAIjB,SAAnBiB,eAAmBjB,CAAAA,IAAD,EAAU;AAChCkB,IAAAA,YAAY,CAAZA,IAAY,CAAZA;AACA,QAAMC,OAAO,GAAGC,WAAW,CAAXA,MAAAA,CAAoBd,UAAAA,IAAD;AAAA,aACjCA,IAAI,CAAJA,KAAAA,CAAAA,WAAAA,GAAAA,QAAAA,CAAkCN,IAAI,CADxC,WACoCA,EAAlCM,CADiC;AAAA,KAAnBc,CAAhB;AAGAhB,IAAAA,OAAO,CAAPA,OAAO,CAAPA;AALF,GAAA;;AAQA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEiB,MAAM,CAACC;AAApB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,cAAA;AAEE,IAAA,KAAK,EAAED,MAAM,CAFf,KAAA;AAGE,IAAA,KAAK,EAHP,KAAA;AAIE,IAAA,cAAc,EAJhB,aAAA;AAKE,IAAA,IAAI,EALN,UAAA;AAME,IAAA,OAAO,EANT,QAAA;AAOE,IAAA,oBAAoB,EAPtB,KAAA;AAQE,IAAA,KAAK,EARP,UAAA;AASE,IAAA,KAAK,EAAE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,IAAA,EAAA;AAAY,MAAA,IAAI,EAAC;AAAjB,KAAA;AATT,GAAA,EADF,KACE,CAAA,CADF,EAaGE,SAAS,GAAG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG;AAApB,GAAA,EAAH,SAAG,CAAH,GAdd,IACE,CADF,EAiBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,OAAO,EAAf,OAAA;AAA0B,IAAA,WAAW,EAAE;AAAvC,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,KAAA,EAAA,IAAA,EADF,KACE,CADF,EAEE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,OAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,UAAA,EAAA;AAAmB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAR,GAAA;AAAeC,MAAAA,eAAe,EAAE;AAAhC;AAA1B,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,IAAA,KAAK,EADP,SAAA;AAEE,IAAA,WAAW,EAFb,QAAA;AAGE,IAAA,YAAY,EAAG1B,sBAAAA,IAAD;AAAA,aAAUiB,eAAe,CAHzC,IAGyC,CAAzB;AAAA,KAHhB;AAIE,IAAA,KAAK,EAAE;AAAEU,MAAAA,YAAY,EAAE;AAAhB;AAJT,GAAA,CADF,EAOGC,WAAW,KAAXA,IAAAA,IACC,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AACE,IAAA,KAAK,EAAE;AAAEd,MAAAA,aAAa,EAAf,KAAA;AAAwBC,MAAAA,UAAU,EAAE;AAApC,KADT;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbH,MAAAA,SAAS;AACV;AAJH,GAAA,EAME,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACE,IAAA,SAAS,EAAED,aADb,EAAA;AAEE,IAAA,KAAK,EAAC;AAFR,GAAA,CANF,CARJ,EAoBE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,EACGiB,WAAW,KAAXA,IAAAA,GACGf,mBADHe,EAAAA,GAEGZ,oBA1BZ,EAuBM,CApBF,CADF,CAFF,EA8BE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,OAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,OAAO,EAAEzB;AAAjB,GAAA,EAnDZ,MAmDY,CADF,CA9BF,CADF,CADF,CAjBF,CADF;AA1IF,CAAA;;AAsMA,IAAM8B,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTO,IAAAA,KAAK,EADI,MAAA;AAETF,IAAAA,YAAY,EAAE;AAFL,GADoB;AAK/BG,EAAAA,KAAK,EAAE;AACLC,IAAAA,eAAe,EAAE;AADZ,GALwB;AAQ/BP,EAAAA,KAAK,EAAE;AACLQ,IAAAA,QAAQ,EADH,EAAA;AAELC,IAAAA,KAAK,EAFA,KAAA;AAGLC,IAAAA,iBAAiB,EAHZ,CAAA;AAILC,IAAAA,UAAU,EAAE;AAJP;AARwB,CAAlB,CAAf;AAgBA,eAAeC,IAAI,CAAnB,WAAmB,CAAnB","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\nimport React, { memo, useRef, useState } from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n} from 'react-native';\nimport {\n  TextInput as Input,\n  Button,\n  Dialog,\n  Portal,\n  Searchbar,\n} from 'react-native-paper';\nimport CheckboxInput from '../components/checkBox';\n\nconst PaperSelect = ({\n  label,\n  arrayList,\n  selectedArrayList,\n  multiEnable,\n  errorText,\n  value,\n  onSelection,\n  ...props\n}) => {\n  const [selectText, setSelectText] = useState(value);\n  const [searchKey, setSearchKey] = useState('');\n  const [arrayHolder, setArrayHolder] = useState([...arrayList]);\n\n  const [list, setList] = useState([...arrayList]);\n\n  const [selectedList, setSelectedList] = useState([...selectedArrayList]);\n\n  const selectInputRef = useRef();\n  const [visible, setVisible] = useState(false);\n\n  const showDialog = () => setVisible(true);\n\n  const _hideDialog = () => {\n    var data = [...list];\n    var selectedData = [...selectedList];\n    let selected = [];\n    selectedData.forEach((val) => {\n      data.forEach((el) => {\n        if (val._id === el._id) {\n          selected.push(el.value);\n        }\n      });\n    });\n    value = selected.join();\n    setSelectText(selected.join());\n    onSelection({\n      text: selected.join(),\n      selectedList: selectedData,\n    });\n    setVisible(false);\n    selectInputRef.current.blur();\n  };\n\n  const _onFocus = () => {\n    setArrayHolder(arrayList);\n    setList(arrayList);\n    showDialog();\n  };\n\n  const _onChecked = (item) => {\n    const selectedData = [...selectedList];\n    // const index = data.findIndex(x => x._id === item._id);\n    const indexSelected = selectedData.indexOf(item);\n    if (indexSelected > -1) {\n      selectedData.splice(indexSelected, 1);\n    } else {\n      selectedData.push(item);\n    }\n    setSelectedList(selectedData);\n  };\n\n  const _onCheckedSingle = (item) => {\n    var selectedData = [...selectedList];\n    // const index = data.findIndex(x => x._id === item._id);\n    const indexSelected = selectedData.indexOf(item);\n    if (indexSelected > -1) {\n      // selectedData.splice(indexSelected, 1);\n      selectedData = [];\n    } else {\n      selectedData = [];\n      selectedData.push(item);\n    }\n    setSelectedList(selectedData);\n  };\n\n  const _exists = (item) => {\n    return selectedList.indexOf(item) > -1 ? true : false;\n  };\n\n  const _isCheckedAll = () => {\n    const data = [...list];\n    const selectedData = [...selectedList];\n    return selectedData.length !== 0 && selectedData.length === data.length;\n  };\n\n  const _checkAll = () => {\n    const data = [...list];\n    var selectedData = [...selectedList];\n    if (selectedData.length === data.length) {\n      selectedData = [];\n    } else if (selectedData.length === 0 || selectedData.length > 0) {\n      selectedData = data.slice(0);\n    }\n\n    setSelectedList(selectedData);\n  };\n\n  const _renderListForMulti = () => {\n    return list.map((item, key) => {\n      return (\n        <TouchableOpacity\n          style={{ flexDirection: 'row', alignItems: 'center' }}\n          key={key}\n          onPress={() => {\n            _onChecked(item);\n          }}\n        >\n          <CheckboxInput isChecked={_exists(item)} label={item.value} />\n        </TouchableOpacity>\n      );\n    });\n  };\n\n  const _renderListForSingle = () => {\n    return list.map((item, key) => {\n      return (\n        <TouchableOpacity\n          style={{ flexDirection: 'row', alignItems: 'center' }}\n          key={key}\n          onPress={() => {\n            _onCheckedSingle(item);\n          }}\n        >\n          <CheckboxInput isChecked={_exists(item)} label={item.value} />\n        </TouchableOpacity>\n      );\n    });\n  };\n\n  const _filterFunction = (text) => {\n    setSearchKey(text);\n    const newData = arrayHolder.filter((item) =>\n      item.value.toLowerCase().includes(text.toLowerCase())\n    );\n    setList(newData);\n  };\n\n  return (\n    <>\n      <View style={styles.container}>\n        <Input\n          ref={selectInputRef}\n          style={styles.input}\n          label={label}\n          underlineColor=\"transparent\"\n          mode=\"outlined\"\n          onFocus={_onFocus}\n          showSoftInputOnFocus={false}\n          value={selectText}\n          right={<Input.Icon name=\"chevron-down\" />}\n          {...props}\n        />\n        {errorText ? <Text style={styles.error}>{errorText}</Text> : null}\n      </View>\n\n      <View>\n        <Portal>\n          <Dialog visible={visible} dismissable={false}>\n            <Dialog.Title>{label}</Dialog.Title>\n            <Dialog.Content>\n              <Dialog.ScrollArea style={{ height: 300, paddingVertical: 10 }}>\n                <Searchbar\n                  value={searchKey}\n                  placeholder=\"Search\"\n                  onChangeText={(text) => _filterFunction(text)}\n                  style={{ marginBottom: 15 }}\n                />\n                {multiEnable === true && (\n                  <TouchableOpacity\n                    style={{ flexDirection: 'row', alignItems: 'center' }}\n                    onPress={() => {\n                      _checkAll();\n                    }}\n                  >\n                    <CheckboxInput\n                      isChecked={_isCheckedAll()}\n                      label=\"Select All\"\n                    />\n                  </TouchableOpacity>\n                )}\n                <ScrollView>\n                  {multiEnable === true\n                    ? _renderListForMulti()\n                    : _renderListForSingle()}\n                </ScrollView>\n              </Dialog.ScrollArea>\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={_hideDialog}>Done</Button>\n            </Dialog.Actions>\n          </Dialog>\n        </Portal>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    marginBottom: 10,\n  },\n  input: {\n    backgroundColor: 'white',\n  },\n  error: {\n    fontSize: 14,\n    color: 'red',\n    paddingHorizontal: 4,\n    paddingTop: 4,\n  },\n});\n\nexport default memo(PaperSelect);\n"]},"metadata":{},"sourceType":"module"}